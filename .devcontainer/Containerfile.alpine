// Untested, may have to be fixed if you want to use alpine

FROM rust:alpine3.17

ARG VERSION="stable"
ARG FLUTTER_URL="https://github.com/flutter/flutter"
ARG ANDROID_SDK_TOOLS_VERSION=9477386
ARG ANDROID_NDK_VERSION=r25c
ARG FLUTTER_HOME="/opt/flutter"
ARG ANDROID_HOME="/opt/android"
ARG ANDROID_NDK="$ANDROID_HOME/ndk-bundle"

USER root
WORKDIR /

ENV VERSION=$VERSION \
    PUB_CACHE="/var/tmp/.pub_cache" \
    FLUTTER_HOME=$FLUTTER_HOME \
    FLUTTER_ROOT=$FLUTTER_HOME \
    ANDROID_HOME=$ANDROID_HOME \
    ANDROID_NDK=$ANDROID_NDK \
    ANDROID_NDK_HOME=$ANDROID_NDK \
    DART_HOME="/opt/dart" \
    PATH="${PATH}:${FLUTTER_HOME}/bin:${PUB_CACHE}/bin:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:${DART_HOME}}/bin"

# Install linux dependency and utils
#build-base may be overkill to install gcc
#TODO: check if apk add gcc is enough
RUN set -eux; mkdir -p /usr/lib $PUB_CACHE \
    && apk --no-cache add bash curl git ca-certificates unzip openjdk11-jdk build-base \
    && rm -rf /var/lib/apt/lists/* /var/cache/apk/* \
    && mkdir -p ${ANDROID_HOME}/cmdline-tools /root/.android

# Install & config Flutter
RUN set -eux; git clone -b ${VERSION} --depth 1 "${FLUTTER_URL}.git" "${FLUTTER_ROOT}" \
    && cd "${FLUTTER_ROOT}" \
    && git gc --prune=all

# Install the Android SDK Dependency.
RUN set -eux; wget -q https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS_VERSION}_latest.zip -O /tmp/android-sdk-tools.zip \
    && unzip -q /tmp/android-sdk-tools.zip -d /tmp/ \
    && mv /tmp/cmdline-tools ${ANDROID_HOME}/cmdline-tools/latest/ \
    && rm -rf /tmp/* \
    && touch /root/.android/repositories.cfg \
    && yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses \
    && sdkmanager --sdk_root=${ANDROID_HOME} --install "platform-tools"

# Get glibc for current architecure
RUN arch=$(uname -m); \
    if [[ $arch == x86_64* ]] || [[ $arch == i*86 ]]; then \
    echo "x86_64 Architecture"; \
    export GLIBC_URL="https://github.com/sgerrand/alpine-pkg-glibc"; \
    export GLIBC_VERSION="2.29-r0"; \
    mkdir -p /tmp/glibc; \
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub; \
    wget -O /tmp/glibc/glibc.apk ${GLIBC_URL}/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk; \
    wget -O /tmp/glibc/glibc-bin.apk ${GLIBC_URL}/releases/download/${GLIBC_VERSION}/glibc-bin-${GLIBC_VERSION}.apk; \
    else \
    >&2 echo "Unsupported Architecture"; \
    exit 1; \
    fi

# Create dependencies
RUN set -eux; for f in \
    /etc/ssl/certs \
    /usr/share/ca-certificates \
    /etc/apk/keys \
    #/etc/group \
    #/etc/passwd \
    ${FLUTTER_HOME} \
    ${PUB_CACHE} \
    ${ANDROID_HOME} \
    /root \
    /tmp/glibc \
    ; do \
    dir="$(dirname "$f")"; \
    mkdir -p "/build_dependencies$dir"; \
    cp --archive --link --dereference --no-target-directory "$f" "/build_dependencies$f"; \
    done

# Install dart sdk
RUN set -eux; apk --no-cache add --force-overwrite /tmp/glibc/glibc.apk /tmp/glibc/glibc-bin.apk \
    -u alpine-keys --allow-untrusted \
    && rm -rf /tmp/* /usr/share/man/* /usr/share/doc \
    && dart --disable-analytics && flutter config --no-analytics \
    && flutter doctor && flutter precache --universal --android

# Init android dependency and utils
RUN set -eux; cd "${FLUTTER_HOME}/bin" \
    && yes "y" | flutter doctor --android-licenses \
    && sdkmanager --sdk_root=${ANDROID_HOME} --install "platform-tools" "emulator" "extras;google;instantapps" \
    && sdkmanager --sdk_root=${ANDROID_HOME} --install "platforms;android-31" "platforms;android-32" "build-tools;29.0.2"  \
    && wget -q https://dl.google.com/android/repository/android-ndk-${ANDROID_NDK_VERSION}-linux.zip -O /tmp/android-ndk.zip \
    && unzip -q /tmp/android-ndk.zip -d /tmp/ndk/ \
    && mv /tmp/ndk/*/ $ANDROID_NDK \
    && rm -rf /tmp/* 

# Install rust tools
RUN set -eux; cargo install just \
    && cargo install cargo-ndk \
    && cargo install flutter_rust_bridge_codegen \
    && rustup target add \
    aarch64-linux-android \
    armv7-linux-androideabi \
    x86_64-linux-android \
    i686-linux-android

WORKDIR /home/root