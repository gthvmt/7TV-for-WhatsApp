// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<crate::webp::encode::AlphaFilter> for *mut i32 {
    fn cst_decode(self) -> crate::webp::encode::AlphaFilter {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::webp::encode::AlphaFilter>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::webp::encode::EncodingConfig> for *mut wire_cst_encoding_config {
    fn cst_decode(self) -> crate::webp::encode::EncodingConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::webp::encode::EncodingConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::webp::encode::Filter> for *mut wire_cst_filter {
    fn cst_decode(self) -> crate::webp::encode::Filter {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::webp::encode::Filter>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::webp::encode::FilterConfig> for *mut wire_cst_filter_config {
    fn cst_decode(self) -> crate::webp::encode::FilterConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::webp::encode::FilterConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::webp::encode::Preprocessing> for *mut i32 {
    fn cst_decode(self) -> crate::webp::encode::Preprocessing {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::webp::encode::Preprocessing>::cst_decode(*wrap).into()
    }
}
impl CstDecode<u8> for *mut u8 {
    fn cst_decode(self) -> u8 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::webp::encode::EncodingConfig> for wire_cst_encoding_config {
    fn cst_decode(self) -> crate::webp::encode::EncodingConfig {
        crate::webp::encode::EncodingConfig {
            method: self.method.cst_decode(),
            losless: self.losless.cst_decode(),
            quality: self.quality.cst_decode(),
            target_size: self.target_size.cst_decode(),
            target_psnr: self.target_psnr.cst_decode(),
            segments: self.segments.cst_decode(),
            noise_shaping: self.noise_shaping.cst_decode(),
            filter: self.filter.cst_decode(),
            alpha_compression: self.alpha_compression.cst_decode(),
            alpha_filtering: self.alpha_filtering.cst_decode(),
            alpha_quality: self.alpha_quality.cst_decode(),
            pass: self.pass.cst_decode(),
            show_compressed: self.show_compressed.cst_decode(),
            preprocessing: self.preprocessing.cst_decode(),
            partitions: self.partitions.cst_decode(),
            partition_limit: self.partition_limit.cst_decode(),
            use_sharp_yuv: self.use_sharp_yuv.cst_decode(),
        }
    }
}
impl CstDecode<crate::webp::encode::Filter> for wire_cst_filter {
    fn cst_decode(self) -> crate::webp::encode::Filter {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Simple };
                crate::webp::encode::Filter::Simple(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Strong };
                crate::webp::encode::Filter::Strong(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::webp::encode::FilterConfig> for wire_cst_filter_config {
    fn cst_decode(self) -> crate::webp::encode::FilterConfig {
        crate::webp::encode::FilterConfig {
            strength: self.strength.cst_decode(),
            sharpness: self.sharpness.cst_decode(),
        }
    }
}
impl CstDecode<crate::webp::shared::Frame> for wire_cst_frame {
    fn cst_decode(self) -> crate::webp::shared::Frame {
        crate::webp::shared::Frame {
            data: self.data.cst_decode(),
            width: self.width.cst_decode(),
            height: self.height.cst_decode(),
            timestamp: self.timestamp.cst_decode(),
        }
    }
}
impl CstDecode<Vec<crate::webp::shared::Frame>> for *mut wire_cst_list_frame {
    fn cst_decode(self) -> Vec<crate::webp::shared::Frame> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_encoding_config {
    fn new_with_null_ptr() -> Self {
        Self {
            method: Default::default(),
            losless: Default::default(),
            quality: Default::default(),
            target_size: Default::default(),
            target_psnr: Default::default(),
            segments: Default::default(),
            noise_shaping: Default::default(),
            filter: core::ptr::null_mut(),
            alpha_compression: Default::default(),
            alpha_filtering: core::ptr::null_mut(),
            alpha_quality: Default::default(),
            pass: Default::default(),
            show_compressed: Default::default(),
            preprocessing: core::ptr::null_mut(),
            partitions: Default::default(),
            partition_limit: Default::default(),
            use_sharp_yuv: Default::default(),
        }
    }
}
impl Default for wire_cst_encoding_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_filter {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: FilterKind { nil__: () },
        }
    }
}
impl Default for wire_cst_filter {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_filter_config {
    fn new_with_null_ptr() -> Self {
        Self {
            strength: core::ptr::null_mut(),
            sharpness: Default::default(),
        }
    }
}
impl Default for wire_cst_filter_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_frame {
    fn new_with_null_ptr() -> Self {
        Self {
            data: core::ptr::null_mut(),
            width: Default::default(),
            height: Default::default(),
            timestamp: Default::default(),
        }
    }
}
impl Default for wire_cst_frame {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_wire_calc_translucency(
    port_: i64,
    frames: *mut wire_cst_list_frame,
) {
    wire_calc_translucency_impl(port_, frames)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_wire_encode(
    port_: i64,
    frames: *mut wire_cst_list_frame,
    config: *mut wire_cst_encoding_config,
) {
    wire_encode_impl(port_, frames, config)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_wire_into_frames(
    port_: i64,
    bytes: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_into_frames_impl(port_, bytes)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_wire_upscale_frames_with_padding(
    port_: i64,
    frames: *mut wire_cst_list_frame,
    width: u32,
    height: u32,
) {
    wire_upscale_frames_with_padding_impl(port_, frames, width, height)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_cst_new_box_autoadd_alpha_filter(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_cst_new_box_autoadd_encoding_config(
) -> *mut wire_cst_encoding_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_encoding_config::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_cst_new_box_autoadd_filter() -> *mut wire_cst_filter {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_filter::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_cst_new_box_autoadd_filter_config(
) -> *mut wire_cst_filter_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_filter_config::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_cst_new_box_autoadd_preprocessing(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_cst_new_box_autoadd_u_8(value: u8) -> *mut u8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_cst_new_list_frame(
    len: i32,
) -> *mut wire_cst_list_frame {
    let wrap = wire_cst_list_frame {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_frame>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_cst_new_list_prim_u_8_loose(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_loose {
    let ans = wire_cst_list_prim_u_8_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_seventv_for_whatsapp_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_encoding_config {
    method: u8,
    losless: bool,
    quality: f32,
    target_size: i32,
    target_psnr: f32,
    segments: u8,
    noise_shaping: u8,
    filter: *mut wire_cst_filter,
    alpha_compression: bool,
    alpha_filtering: *mut i32,
    alpha_quality: u8,
    pass: u8,
    show_compressed: bool,
    preprocessing: *mut i32,
    partitions: u8,
    partition_limit: u8,
    use_sharp_yuv: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_filter {
    tag: i32,
    kind: FilterKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union FilterKind {
    Simple: wire_cst_Filter_Simple,
    Strong: wire_cst_Filter_Strong,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Filter_Simple {
    field0: *mut wire_cst_filter_config,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Filter_Strong {
    field0: *mut wire_cst_filter_config,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_filter_config {
    strength: *mut u8,
    sharpness: u8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_frame {
    data: *mut wire_cst_list_prim_u_8_strict,
    width: u32,
    height: u32,
    timestamp: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_frame {
    ptr: *mut wire_cst_frame,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_loose {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
