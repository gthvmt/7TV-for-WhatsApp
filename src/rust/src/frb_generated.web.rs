// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::for_generated::wasm_bindgen;
use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl<T> CstDecode<Option<T>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
where
    JsValue: CstDecode<T>,
{
    fn cst_decode(self) -> Option<T> {
        (!self.is_null() && !self.is_undefined()).then(|| self.cst_decode())
    }
}
impl CstDecode<crate::webp::encode::EncodingConfig>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::webp::encode::EncodingConfig {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            17,
            "Expected 17 elements, got {}",
            self_.length()
        );
        crate::webp::encode::EncodingConfig {
            method: self_.get(0).cst_decode(),
            losless: self_.get(1).cst_decode(),
            quality: self_.get(2).cst_decode(),
            target_size: self_.get(3).cst_decode(),
            target_psnr: self_.get(4).cst_decode(),
            segments: self_.get(5).cst_decode(),
            noise_shaping: self_.get(6).cst_decode(),
            filter: self_.get(7).cst_decode(),
            alpha_compression: self_.get(8).cst_decode(),
            alpha_filtering: self_.get(9).cst_decode(),
            alpha_quality: self_.get(10).cst_decode(),
            pass: self_.get(11).cst_decode(),
            show_compressed: self_.get(12).cst_decode(),
            preprocessing: self_.get(13).cst_decode(),
            partitions: self_.get(14).cst_decode(),
            partition_limit: self_.get(15).cst_decode(),
            use_sharp_yuv: self_.get(16).cst_decode(),
        }
    }
}
impl CstDecode<crate::webp::encode::Filter>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::webp::encode::Filter {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::webp::encode::Filter::Simple(self_.get(1).cst_decode()),
            1 => crate::webp::encode::Filter::Strong(self_.get(1).cst_decode()),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::webp::encode::FilterConfig>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::webp::encode::FilterConfig {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::webp::encode::FilterConfig {
            strength: self_.get(0).cst_decode(),
            sharpness: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::webp::shared::Frame>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::webp::shared::Frame {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::webp::shared::Frame {
            data: self_.get(0).cst_decode(),
            width: self_.get(1).cst_decode(),
            height: self_.get(2).cst_decode(),
            timestamp: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<Vec<crate::webp::shared::Frame>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::webp::shared::Frame> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<u8>> for Box<[u8]> {
    fn cst_decode(self) -> Vec<u8> {
        self.into_vec()
    }
}
impl CstDecode<crate::webp::encode::AlphaFilter>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::webp::encode::AlphaFilter {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> bool {
        self.is_truthy()
    }
}
impl CstDecode<f32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> f32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<i32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<crate::webp::encode::Preprocessing>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::webp::encode::Preprocessing {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<u32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u8 {
        self.unchecked_into_f64() as _
    }
}

#[wasm_bindgen]
pub fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[wasm_bindgen]
pub fn wire_calc_translucency(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    frames: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_calc_translucency_impl(port_, frames)
}

#[wasm_bindgen]
pub fn wire_encode(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    frames: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    config: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_encode_impl(port_, frames, config)
}

#[wasm_bindgen]
pub fn wire_into_frames(port_: flutter_rust_bridge::for_generated::MessagePort, bytes: Box<[u8]>) {
    wire_into_frames_impl(port_, bytes)
}

#[wasm_bindgen]
pub fn wire_upscale_frames_with_padding(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    frames: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    width: u32,
    height: u32,
) {
    wire_upscale_frames_with_padding_impl(port_, frames, width, height)
}
