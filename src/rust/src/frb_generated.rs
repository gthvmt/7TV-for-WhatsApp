// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!();

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_calc_translucency_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    frames: impl CstDecode<Vec<crate::webp::shared::Frame>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "calc_translucency",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_frames = frames.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::api::calc_translucency(api_frames))
                })())
            }
        },
    )
}
fn wire_encode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    frames: impl CstDecode<Vec<crate::webp::shared::Frame>>,
    config: impl CstDecode<crate::webp::encode::EncodingConfig>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "encode",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_frames = frames.cst_decode();
            let api_config = config.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::api::encode(api_frames, api_config))
                })())
            }
        },
    )
}
fn wire_into_frames_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bytes: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "into_frames",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_bytes = bytes.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::api::into_frames(api_bytes))
                })())
            }
        },
    )
}
fn wire_upscale_frames_with_padding_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    frames: impl CstDecode<Vec<crate::webp::shared::Frame>>,
    width: impl CstDecode<u32>,
    height: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "upscale_frames_with_padding",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_frames = frames.cst_decode();
            let api_width = width.cst_decode();
            let api_height = height.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::api::upscale_frames_with_padding(
                        api_frames, api_width, api_height,
                    ))
                })())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<crate::webp::encode::AlphaFilter> for i32 {
    fn cst_decode(self) -> crate::webp::encode::AlphaFilter {
        match self {
            0 => crate::webp::encode::AlphaFilter::Fast,
            1 => crate::webp::encode::AlphaFilter::Best,
            _ => unreachable!("Invalid variant for AlphaFilter: {}", self),
        }
    }
}
impl CstDecode<bool> for bool {
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<f32> for f32 {
    fn cst_decode(self) -> f32 {
        self
    }
}
impl CstDecode<i32> for i32 {
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<crate::webp::encode::Preprocessing> for i32 {
    fn cst_decode(self) -> crate::webp::encode::Preprocessing {
        match self {
            0 => crate::webp::encode::Preprocessing::SegmentSmooth,
            _ => unreachable!("Invalid variant for Preprocessing: {}", self),
        }
    }
}
impl CstDecode<u32> for u32 {
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u8> for u8 {
    fn cst_decode(self) -> u8 {
        self
    }
}
impl SseDecode for crate::webp::encode::AlphaFilter {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::webp::encode::AlphaFilter::Fast,
            1 => crate::webp::encode::AlphaFilter::Best,
            _ => unreachable!("Invalid variant for AlphaFilter: {}", inner),
        };
    }
}

impl SseDecode for bool {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::webp::encode::EncodingConfig {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_method = <u8>::sse_decode(deserializer);
        let mut var_losless = <bool>::sse_decode(deserializer);
        let mut var_quality = <f32>::sse_decode(deserializer);
        let mut var_targetSize = <i32>::sse_decode(deserializer);
        let mut var_targetPsnr = <f32>::sse_decode(deserializer);
        let mut var_segments = <u8>::sse_decode(deserializer);
        let mut var_noiseShaping = <u8>::sse_decode(deserializer);
        let mut var_filter = <Option<crate::webp::encode::Filter>>::sse_decode(deserializer);
        let mut var_alphaCompression = <bool>::sse_decode(deserializer);
        let mut var_alphaFiltering =
            <Option<crate::webp::encode::AlphaFilter>>::sse_decode(deserializer);
        let mut var_alphaQuality = <u8>::sse_decode(deserializer);
        let mut var_pass = <u8>::sse_decode(deserializer);
        let mut var_showCompressed = <bool>::sse_decode(deserializer);
        let mut var_preprocessing =
            <Option<crate::webp::encode::Preprocessing>>::sse_decode(deserializer);
        let mut var_partitions = <u8>::sse_decode(deserializer);
        let mut var_partitionLimit = <u8>::sse_decode(deserializer);
        let mut var_useSharpYuv = <bool>::sse_decode(deserializer);
        return crate::webp::encode::EncodingConfig {
            method: var_method,
            losless: var_losless,
            quality: var_quality,
            target_size: var_targetSize,
            target_psnr: var_targetPsnr,
            segments: var_segments,
            noise_shaping: var_noiseShaping,
            filter: var_filter,
            alpha_compression: var_alphaCompression,
            alpha_filtering: var_alphaFiltering,
            alpha_quality: var_alphaQuality,
            pass: var_pass,
            show_compressed: var_showCompressed,
            preprocessing: var_preprocessing,
            partitions: var_partitions,
            partition_limit: var_partitionLimit,
            use_sharp_yuv: var_useSharpYuv,
        };
    }
}

impl SseDecode for f32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::webp::encode::Filter {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::webp::encode::FilterConfig>::sse_decode(deserializer);
                return crate::webp::encode::Filter::Simple(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::webp::encode::FilterConfig>::sse_decode(deserializer);
                return crate::webp::encode::Filter::Strong(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::webp::encode::FilterConfig {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_strength = <Option<u8>>::sse_decode(deserializer);
        let mut var_sharpness = <u8>::sse_decode(deserializer);
        return crate::webp::encode::FilterConfig {
            strength: var_strength,
            sharpness: var_sharpness,
        };
    }
}

impl SseDecode for crate::webp::shared::Frame {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <Vec<u8>>::sse_decode(deserializer);
        let mut var_width = <u32>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        let mut var_timestamp = <i32>::sse_decode(deserializer);
        return crate::webp::shared::Frame {
            data: var_data,
            width: var_width,
            height: var_height,
            timestamp: var_timestamp,
        };
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::webp::shared::Frame> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::webp::shared::Frame>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<crate::webp::encode::AlphaFilter> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::webp::encode::AlphaFilter>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::webp::encode::Filter> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::webp::encode::Filter>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::webp::encode::Preprocessing> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::webp::encode::Preprocessing>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::webp::encode::Preprocessing {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::webp::encode::Preprocessing::SegmentSmooth,
            _ => unreachable!("Invalid variant for Preprocessing: {}", inner),
        };
    }
}

impl SseDecode for u32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for crate::webp::encode::AlphaFilter {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Fast => 0,
            Self::Best => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::webp::encode::AlphaFilter
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::webp::encode::AlphaFilter>
    for crate::webp::encode::AlphaFilter
{
    fn into_into_dart(self) -> crate::webp::encode::AlphaFilter {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::webp::encode::EncodingConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.method.into_into_dart().into_dart(),
            self.losless.into_into_dart().into_dart(),
            self.quality.into_into_dart().into_dart(),
            self.target_size.into_into_dart().into_dart(),
            self.target_psnr.into_into_dart().into_dart(),
            self.segments.into_into_dart().into_dart(),
            self.noise_shaping.into_into_dart().into_dart(),
            self.filter.into_into_dart().into_dart(),
            self.alpha_compression.into_into_dart().into_dart(),
            self.alpha_filtering.into_into_dart().into_dart(),
            self.alpha_quality.into_into_dart().into_dart(),
            self.pass.into_into_dart().into_dart(),
            self.show_compressed.into_into_dart().into_dart(),
            self.preprocessing.into_into_dart().into_dart(),
            self.partitions.into_into_dart().into_dart(),
            self.partition_limit.into_into_dart().into_dart(),
            self.use_sharp_yuv.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::webp::encode::EncodingConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::webp::encode::EncodingConfig>
    for crate::webp::encode::EncodingConfig
{
    fn into_into_dart(self) -> crate::webp::encode::EncodingConfig {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::webp::encode::Filter {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::webp::encode::Filter::Simple(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::webp::encode::Filter::Strong(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::webp::encode::Filter {}
impl flutter_rust_bridge::IntoIntoDart<crate::webp::encode::Filter>
    for crate::webp::encode::Filter
{
    fn into_into_dart(self) -> crate::webp::encode::Filter {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::webp::encode::FilterConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.strength.into_into_dart().into_dart(),
            self.sharpness.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::webp::encode::FilterConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::webp::encode::FilterConfig>
    for crate::webp::encode::FilterConfig
{
    fn into_into_dart(self) -> crate::webp::encode::FilterConfig {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::webp::shared::Frame {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.data.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.timestamp.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::webp::shared::Frame {}
impl flutter_rust_bridge::IntoIntoDart<crate::webp::shared::Frame> for crate::webp::shared::Frame {
    fn into_into_dart(self) -> crate::webp::shared::Frame {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::webp::encode::Preprocessing {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::SegmentSmooth => 0,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::webp::encode::Preprocessing
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::webp::encode::Preprocessing>
    for crate::webp::encode::Preprocessing
{
    fn into_into_dart(self) -> crate::webp::encode::Preprocessing {
        self
    }
}

impl SseEncode for crate::webp::encode::AlphaFilter {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for bool {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::webp::encode::EncodingConfig {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u8>::sse_encode(self.method, serializer);
        <bool>::sse_encode(self.losless, serializer);
        <f32>::sse_encode(self.quality, serializer);
        <i32>::sse_encode(self.target_size, serializer);
        <f32>::sse_encode(self.target_psnr, serializer);
        <u8>::sse_encode(self.segments, serializer);
        <u8>::sse_encode(self.noise_shaping, serializer);
        <Option<crate::webp::encode::Filter>>::sse_encode(self.filter, serializer);
        <bool>::sse_encode(self.alpha_compression, serializer);
        <Option<crate::webp::encode::AlphaFilter>>::sse_encode(self.alpha_filtering, serializer);
        <u8>::sse_encode(self.alpha_quality, serializer);
        <u8>::sse_encode(self.pass, serializer);
        <bool>::sse_encode(self.show_compressed, serializer);
        <Option<crate::webp::encode::Preprocessing>>::sse_encode(self.preprocessing, serializer);
        <u8>::sse_encode(self.partitions, serializer);
        <u8>::sse_encode(self.partition_limit, serializer);
        <bool>::sse_encode(self.use_sharp_yuv, serializer);
    }
}

impl SseEncode for f32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::webp::encode::Filter {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::webp::encode::Filter::Simple(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::webp::encode::FilterConfig>::sse_encode(field0, serializer);
            }
            crate::webp::encode::Filter::Strong(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::webp::encode::FilterConfig>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::webp::encode::FilterConfig {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u8>>::sse_encode(self.strength, serializer);
        <u8>::sse_encode(self.sharpness, serializer);
    }
}

impl SseEncode for crate::webp::shared::Frame {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.data, serializer);
        <u32>::sse_encode(self.width, serializer);
        <u32>::sse_encode(self.height, serializer);
        <i32>::sse_encode(self.timestamp, serializer);
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::webp::shared::Frame> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::webp::shared::Frame>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<crate::webp::encode::AlphaFilter> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::webp::encode::AlphaFilter>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::webp::encode::Filter> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::webp::encode::Filter>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::webp::encode::Preprocessing> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::webp::encode::Preprocessing>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::webp::encode::Preprocessing {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for u32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
