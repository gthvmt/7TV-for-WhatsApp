// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'webp/encode.dart';
import 'webp/shared.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<double> calcTranslucency({required List<Frame> frames, dynamic hint});

  Future<Uint8List> encode(
      {required List<Frame> frames,
      required EncodingConfig config,
      dynamic hint});

  Future<List<Frame>> intoFrames({required List<int> bytes, dynamic hint});

  Future<List<Frame>> upscaleFramesWithPadding(
      {required List<Frame> frames,
      required int width,
      required int height,
      dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<double> calcTranslucency({required List<Frame> frames, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_frame(frames);
        return wire.wire_calc_translucency(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCalcTranslucencyConstMeta,
      argValues: [frames],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCalcTranslucencyConstMeta => const TaskConstMeta(
        debugName: "calc_translucency",
        argNames: ["frames"],
      );

  @override
  Future<Uint8List> encode(
      {required List<Frame> frames,
      required EncodingConfig config,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_frame(frames);
        var arg1 = cst_encode_box_autoadd_encoding_config(config);
        return wire.wire_encode(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kEncodeConstMeta,
      argValues: [frames, config],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEncodeConstMeta => const TaskConstMeta(
        debugName: "encode",
        argNames: ["frames", "config"],
      );

  @override
  Future<List<Frame>> intoFrames({required List<int> bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8_loose(bytes);
        return wire.wire_into_frames(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_frame,
        decodeErrorData: null,
      ),
      constMeta: kIntoFramesConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIntoFramesConstMeta => const TaskConstMeta(
        debugName: "into_frames",
        argNames: ["bytes"],
      );

  @override
  Future<List<Frame>> upscaleFramesWithPadding(
      {required List<Frame> frames,
      required int width,
      required int height,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_frame(frames);
        var arg1 = cst_encode_u_32(width);
        var arg2 = cst_encode_u_32(height);
        return wire.wire_upscale_frames_with_padding(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_frame,
        decodeErrorData: null,
      ),
      constMeta: kUpscaleFramesWithPaddingConstMeta,
      argValues: [frames, width, height],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUpscaleFramesWithPaddingConstMeta => const TaskConstMeta(
        debugName: "upscale_frames_with_padding",
        argNames: ["frames", "width", "height"],
      );

  @protected
  AlphaFilter dco_decode_alpha_filter(dynamic raw) {
    return AlphaFilter.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  AlphaFilter dco_decode_box_autoadd_alpha_filter(dynamic raw) {
    return dco_decode_alpha_filter(raw);
  }

  @protected
  EncodingConfig dco_decode_box_autoadd_encoding_config(dynamic raw) {
    return dco_decode_encoding_config(raw);
  }

  @protected
  Filter dco_decode_box_autoadd_filter(dynamic raw) {
    return dco_decode_filter(raw);
  }

  @protected
  FilterConfig dco_decode_box_autoadd_filter_config(dynamic raw) {
    return dco_decode_filter_config(raw);
  }

  @protected
  Preprocessing dco_decode_box_autoadd_preprocessing(dynamic raw) {
    return dco_decode_preprocessing(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  EncodingConfig dco_decode_encoding_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 17)
      throw Exception('unexpected arr length: expect 17 but see ${arr.length}');
    return EncodingConfig(
      method: dco_decode_u_8(arr[0]),
      losless: dco_decode_bool(arr[1]),
      quality: dco_decode_f_32(arr[2]),
      targetSize: dco_decode_i_32(arr[3]),
      targetPsnr: dco_decode_f_32(arr[4]),
      segments: dco_decode_u_8(arr[5]),
      noiseShaping: dco_decode_u_8(arr[6]),
      filter: dco_decode_opt_box_autoadd_filter(arr[7]),
      alphaCompression: dco_decode_bool(arr[8]),
      alphaFiltering: dco_decode_opt_box_autoadd_alpha_filter(arr[9]),
      alphaQuality: dco_decode_u_8(arr[10]),
      pass: dco_decode_u_8(arr[11]),
      showCompressed: dco_decode_bool(arr[12]),
      preprocessing: dco_decode_opt_box_autoadd_preprocessing(arr[13]),
      partitions: dco_decode_u_8(arr[14]),
      partitionLimit: dco_decode_u_8(arr[15]),
      useSharpYuv: dco_decode_bool(arr[16]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    return raw as double;
  }

  @protected
  Filter dco_decode_filter(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Filter_Simple(
          dco_decode_box_autoadd_filter_config(raw[1]),
        );
      case 1:
        return Filter_Strong(
          dco_decode_box_autoadd_filter_config(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  FilterConfig dco_decode_filter_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FilterConfig(
      strength: dco_decode_opt_box_autoadd_u_8(arr[0]),
      sharpness: dco_decode_u_8(arr[1]),
    );
  }

  @protected
  Frame dco_decode_frame(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Frame(
      data: dco_decode_list_prim_u_8_strict(arr[0]),
      width: dco_decode_u_32(arr[1]),
      height: dco_decode_u_32(arr[2]),
      timestamp: dco_decode_i_32(arr[3]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    return raw as int;
  }

  @protected
  List<Frame> dco_decode_list_frame(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_frame).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  AlphaFilter? dco_decode_opt_box_autoadd_alpha_filter(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_alpha_filter(raw);
  }

  @protected
  Filter? dco_decode_opt_box_autoadd_filter(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_filter(raw);
  }

  @protected
  Preprocessing? dco_decode_opt_box_autoadd_preprocessing(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_preprocessing(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  Preprocessing dco_decode_preprocessing(dynamic raw) {
    return Preprocessing.values[raw as int];
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  AlphaFilter sse_decode_alpha_filter(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return AlphaFilter.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AlphaFilter sse_decode_box_autoadd_alpha_filter(
      SseDeserializer deserializer) {
    return (sse_decode_alpha_filter(deserializer));
  }

  @protected
  EncodingConfig sse_decode_box_autoadd_encoding_config(
      SseDeserializer deserializer) {
    return (sse_decode_encoding_config(deserializer));
  }

  @protected
  Filter sse_decode_box_autoadd_filter(SseDeserializer deserializer) {
    return (sse_decode_filter(deserializer));
  }

  @protected
  FilterConfig sse_decode_box_autoadd_filter_config(
      SseDeserializer deserializer) {
    return (sse_decode_filter_config(deserializer));
  }

  @protected
  Preprocessing sse_decode_box_autoadd_preprocessing(
      SseDeserializer deserializer) {
    return (sse_decode_preprocessing(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    return (sse_decode_u_8(deserializer));
  }

  @protected
  EncodingConfig sse_decode_encoding_config(SseDeserializer deserializer) {
    var var_method = sse_decode_u_8(deserializer);
    var var_losless = sse_decode_bool(deserializer);
    var var_quality = sse_decode_f_32(deserializer);
    var var_targetSize = sse_decode_i_32(deserializer);
    var var_targetPsnr = sse_decode_f_32(deserializer);
    var var_segments = sse_decode_u_8(deserializer);
    var var_noiseShaping = sse_decode_u_8(deserializer);
    var var_filter = sse_decode_opt_box_autoadd_filter(deserializer);
    var var_alphaCompression = sse_decode_bool(deserializer);
    var var_alphaFiltering =
        sse_decode_opt_box_autoadd_alpha_filter(deserializer);
    var var_alphaQuality = sse_decode_u_8(deserializer);
    var var_pass = sse_decode_u_8(deserializer);
    var var_showCompressed = sse_decode_bool(deserializer);
    var var_preprocessing =
        sse_decode_opt_box_autoadd_preprocessing(deserializer);
    var var_partitions = sse_decode_u_8(deserializer);
    var var_partitionLimit = sse_decode_u_8(deserializer);
    var var_useSharpYuv = sse_decode_bool(deserializer);
    return EncodingConfig(
        method: var_method,
        losless: var_losless,
        quality: var_quality,
        targetSize: var_targetSize,
        targetPsnr: var_targetPsnr,
        segments: var_segments,
        noiseShaping: var_noiseShaping,
        filter: var_filter,
        alphaCompression: var_alphaCompression,
        alphaFiltering: var_alphaFiltering,
        alphaQuality: var_alphaQuality,
        pass: var_pass,
        showCompressed: var_showCompressed,
        preprocessing: var_preprocessing,
        partitions: var_partitions,
        partitionLimit: var_partitionLimit,
        useSharpYuv: var_useSharpYuv);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat32();
  }

  @protected
  Filter sse_decode_filter(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_filter_config(deserializer);
        return Filter_Simple(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_filter_config(deserializer);
        return Filter_Strong(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FilterConfig sse_decode_filter_config(SseDeserializer deserializer) {
    var var_strength = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_sharpness = sse_decode_u_8(deserializer);
    return FilterConfig(strength: var_strength, sharpness: var_sharpness);
  }

  @protected
  Frame sse_decode_frame(SseDeserializer deserializer) {
    var var_data = sse_decode_list_prim_u_8_strict(deserializer);
    var var_width = sse_decode_u_32(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_timestamp = sse_decode_i_32(deserializer);
    return Frame(
        data: var_data,
        width: var_width,
        height: var_height,
        timestamp: var_timestamp);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  List<Frame> sse_decode_list_frame(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Frame>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_frame(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  AlphaFilter? sse_decode_opt_box_autoadd_alpha_filter(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_alpha_filter(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Filter? sse_decode_opt_box_autoadd_filter(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_filter(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Preprocessing? sse_decode_opt_box_autoadd_preprocessing(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_preprocessing(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Preprocessing sse_decode_preprocessing(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return Preprocessing.values[inner];
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int cst_encode_alpha_filter(AlphaFilter raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  double cst_encode_f_32(double raw) {
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    return raw;
  }

  @protected
  int cst_encode_preprocessing(Preprocessing raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_32(int raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  void sse_encode_alpha_filter(AlphaFilter self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_alpha_filter(
      AlphaFilter self, SseSerializer serializer) {
    sse_encode_alpha_filter(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_encoding_config(
      EncodingConfig self, SseSerializer serializer) {
    sse_encode_encoding_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_filter(Filter self, SseSerializer serializer) {
    sse_encode_filter(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_filter_config(
      FilterConfig self, SseSerializer serializer) {
    sse_encode_filter_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_preprocessing(
      Preprocessing self, SseSerializer serializer) {
    sse_encode_preprocessing(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_encoding_config(
      EncodingConfig self, SseSerializer serializer) {
    sse_encode_u_8(self.method, serializer);
    sse_encode_bool(self.losless, serializer);
    sse_encode_f_32(self.quality, serializer);
    sse_encode_i_32(self.targetSize, serializer);
    sse_encode_f_32(self.targetPsnr, serializer);
    sse_encode_u_8(self.segments, serializer);
    sse_encode_u_8(self.noiseShaping, serializer);
    sse_encode_opt_box_autoadd_filter(self.filter, serializer);
    sse_encode_bool(self.alphaCompression, serializer);
    sse_encode_opt_box_autoadd_alpha_filter(self.alphaFiltering, serializer);
    sse_encode_u_8(self.alphaQuality, serializer);
    sse_encode_u_8(self.pass, serializer);
    sse_encode_bool(self.showCompressed, serializer);
    sse_encode_opt_box_autoadd_preprocessing(self.preprocessing, serializer);
    sse_encode_u_8(self.partitions, serializer);
    sse_encode_u_8(self.partitionLimit, serializer);
    sse_encode_bool(self.useSharpYuv, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_filter(Filter self, SseSerializer serializer) {
    switch (self) {
      case Filter_Simple(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_filter_config(field0, serializer);
      case Filter_Strong(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_filter_config(field0, serializer);
    }
  }

  @protected
  void sse_encode_filter_config(FilterConfig self, SseSerializer serializer) {
    sse_encode_opt_box_autoadd_u_8(self.strength, serializer);
    sse_encode_u_8(self.sharpness, serializer);
  }

  @protected
  void sse_encode_frame(Frame self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(self.data, serializer);
    sse_encode_u_32(self.width, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_i_32(self.timestamp, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_frame(List<Frame> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_frame(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_alpha_filter(
      AlphaFilter? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_alpha_filter(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_filter(
      Filter? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_filter(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_preprocessing(
      Preprocessing? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_preprocessing(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_preprocessing(Preprocessing self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}
}
