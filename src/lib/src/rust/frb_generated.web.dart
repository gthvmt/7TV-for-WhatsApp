// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';
import 'webp/encode.dart';
import 'webp/shared.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AlphaFilter dco_decode_alpha_filter(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AlphaFilter dco_decode_box_autoadd_alpha_filter(dynamic raw);

  @protected
  EncodingConfig dco_decode_box_autoadd_encoding_config(dynamic raw);

  @protected
  Filter dco_decode_box_autoadd_filter(dynamic raw);

  @protected
  FilterConfig dco_decode_box_autoadd_filter_config(dynamic raw);

  @protected
  Preprocessing dco_decode_box_autoadd_preprocessing(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw);

  @protected
  EncodingConfig dco_decode_encoding_config(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  Filter dco_decode_filter(dynamic raw);

  @protected
  FilterConfig dco_decode_filter_config(dynamic raw);

  @protected
  Frame dco_decode_frame(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<Frame> dco_decode_list_frame(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  AlphaFilter? dco_decode_opt_box_autoadd_alpha_filter(dynamic raw);

  @protected
  Filter? dco_decode_opt_box_autoadd_filter(dynamic raw);

  @protected
  Preprocessing? dco_decode_opt_box_autoadd_preprocessing(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw);

  @protected
  Preprocessing dco_decode_preprocessing(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  AlphaFilter sse_decode_alpha_filter(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AlphaFilter sse_decode_box_autoadd_alpha_filter(SseDeserializer deserializer);

  @protected
  EncodingConfig sse_decode_box_autoadd_encoding_config(
      SseDeserializer deserializer);

  @protected
  Filter sse_decode_box_autoadd_filter(SseDeserializer deserializer);

  @protected
  FilterConfig sse_decode_box_autoadd_filter_config(
      SseDeserializer deserializer);

  @protected
  Preprocessing sse_decode_box_autoadd_preprocessing(
      SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  EncodingConfig sse_decode_encoding_config(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  Filter sse_decode_filter(SseDeserializer deserializer);

  @protected
  FilterConfig sse_decode_filter_config(SseDeserializer deserializer);

  @protected
  Frame sse_decode_frame(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<Frame> sse_decode_list_frame(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  AlphaFilter? sse_decode_opt_box_autoadd_alpha_filter(
      SseDeserializer deserializer);

  @protected
  Filter? sse_decode_opt_box_autoadd_filter(SseDeserializer deserializer);

  @protected
  Preprocessing? sse_decode_opt_box_autoadd_preprocessing(
      SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  Preprocessing sse_decode_preprocessing(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int cst_encode_box_autoadd_alpha_filter(AlphaFilter raw) {
    return cst_encode_alpha_filter(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_encoding_config(EncodingConfig raw) {
    return cst_encode_encoding_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_filter(Filter raw) {
    return cst_encode_filter(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_filter_config(FilterConfig raw) {
    return cst_encode_filter_config(raw);
  }

  @protected
  int cst_encode_box_autoadd_preprocessing(Preprocessing raw) {
    return cst_encode_preprocessing(raw);
  }

  @protected
  int cst_encode_box_autoadd_u_8(int raw) {
    return cst_encode_u_8(raw);
  }

  @protected
  List<dynamic> cst_encode_encoding_config(EncodingConfig raw) {
    return [
      cst_encode_u_8(raw.method),
      cst_encode_bool(raw.losless),
      cst_encode_f_32(raw.quality),
      cst_encode_i_32(raw.targetSize),
      cst_encode_f_32(raw.targetPsnr),
      cst_encode_u_8(raw.segments),
      cst_encode_u_8(raw.noiseShaping),
      cst_encode_opt_box_autoadd_filter(raw.filter),
      cst_encode_bool(raw.alphaCompression),
      cst_encode_opt_box_autoadd_alpha_filter(raw.alphaFiltering),
      cst_encode_u_8(raw.alphaQuality),
      cst_encode_u_8(raw.pass),
      cst_encode_bool(raw.showCompressed),
      cst_encode_opt_box_autoadd_preprocessing(raw.preprocessing),
      cst_encode_u_8(raw.partitions),
      cst_encode_u_8(raw.partitionLimit),
      cst_encode_bool(raw.useSharpYuv)
    ];
  }

  @protected
  List<dynamic> cst_encode_filter(Filter raw) {
    if (raw is Filter_Simple) {
      return [0, cst_encode_box_autoadd_filter_config(raw.field0)];
    }
    if (raw is Filter_Strong) {
      return [1, cst_encode_box_autoadd_filter_config(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_filter_config(FilterConfig raw) {
    return [
      cst_encode_opt_box_autoadd_u_8(raw.strength),
      cst_encode_u_8(raw.sharpness)
    ];
  }

  @protected
  List<dynamic> cst_encode_frame(Frame raw) {
    return [
      cst_encode_list_prim_u_8_strict(raw.data),
      cst_encode_u_32(raw.width),
      cst_encode_u_32(raw.height),
      cst_encode_i_32(raw.timestamp)
    ];
  }

  @protected
  List<dynamic> cst_encode_list_frame(List<Frame> raw) {
    return raw.map(cst_encode_frame).toList();
  }

  @protected
  List<int> cst_encode_list_prim_u_8_loose(List<int> raw) {
    return raw;
  }

  @protected
  Uint8List cst_encode_list_prim_u_8_strict(Uint8List raw) {
    return raw;
  }

  @protected
  int? cst_encode_opt_box_autoadd_alpha_filter(AlphaFilter? raw) {
    return raw == null ? null : cst_encode_box_autoadd_alpha_filter(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_filter(Filter? raw) {
    return raw == null ? null : cst_encode_box_autoadd_filter(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_preprocessing(Preprocessing? raw) {
    return raw == null ? null : cst_encode_box_autoadd_preprocessing(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_u_8(int? raw) {
    return raw == null ? null : cst_encode_box_autoadd_u_8(raw);
  }

  @protected
  int cst_encode_alpha_filter(AlphaFilter raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_preprocessing(Preprocessing raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_alpha_filter(AlphaFilter self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_alpha_filter(
      AlphaFilter self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_encoding_config(
      EncodingConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_filter(Filter self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_filter_config(
      FilterConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_preprocessing(
      Preprocessing self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_encoding_config(
      EncodingConfig self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_filter(Filter self, SseSerializer serializer);

  @protected
  void sse_encode_filter_config(FilterConfig self, SseSerializer serializer);

  @protected
  void sse_encode_frame(Frame self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_frame(List<Frame> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_alpha_filter(
      AlphaFilter? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_filter(
      Filter? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_preprocessing(
      Preprocessing? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer);

  @protected
  void sse_encode_preprocessing(Preprocessing self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire extends BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void dart_fn_deliver_output(int call_id, PlatformGeneralizedUint8ListPtr ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.dart_fn_deliver_output(
          call_id, ptr_, rust_vec_len_, data_len_);

  void wire_calc_translucency(NativePortType port_, List<dynamic> frames) =>
      wasmModule.wire_calc_translucency(port_, frames);

  void wire_encode(
          NativePortType port_, List<dynamic> frames, List<dynamic> config) =>
      wasmModule.wire_encode(port_, frames, config);

  void wire_into_frames(NativePortType port_, List<int> bytes) =>
      wasmModule.wire_into_frames(port_, bytes);

  void wire_upscale_frames_with_padding(
          NativePortType port_, List<dynamic> frames, int width, int height) =>
      wasmModule.wire_upscale_frames_with_padding(port_, frames, width, height);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);

  external void dart_fn_deliver_output(int call_id,
      PlatformGeneralizedUint8ListPtr ptr_, int rust_vec_len_, int data_len_);

  external void wire_calc_translucency(
      NativePortType port_, List<dynamic> frames);

  external void wire_encode(
      NativePortType port_, List<dynamic> frames, List<dynamic> config);

  external void wire_into_frames(NativePortType port_, List<int> bytes);

  external void wire_upscale_frames_with_padding(
      NativePortType port_, List<dynamic> frames, int width, int height);
}
