// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'encode.freezed.dart';

enum AlphaFilter {
  fast,
  best,
}

class EncodingConfig {
  final int method;
  final bool losless;
  final double quality;
  final int targetSize;
  final double targetPsnr;
  final int segments;
  final int noiseShaping;
  final Filter? filter;
  final bool alphaCompression;
  final AlphaFilter? alphaFiltering;
  final int alphaQuality;
  final int pass;
  final bool showCompressed;
  final Preprocessing? preprocessing;
  final int partitions;
  final int partitionLimit;
  final bool useSharpYuv;

  const EncodingConfig({
    required this.method,
    required this.losless,
    required this.quality,
    required this.targetSize,
    required this.targetPsnr,
    required this.segments,
    required this.noiseShaping,
    this.filter,
    required this.alphaCompression,
    this.alphaFiltering,
    required this.alphaQuality,
    required this.pass,
    required this.showCompressed,
    this.preprocessing,
    required this.partitions,
    required this.partitionLimit,
    required this.useSharpYuv,
  });

  @override
  int get hashCode =>
      method.hashCode ^
      losless.hashCode ^
      quality.hashCode ^
      targetSize.hashCode ^
      targetPsnr.hashCode ^
      segments.hashCode ^
      noiseShaping.hashCode ^
      filter.hashCode ^
      alphaCompression.hashCode ^
      alphaFiltering.hashCode ^
      alphaQuality.hashCode ^
      pass.hashCode ^
      showCompressed.hashCode ^
      preprocessing.hashCode ^
      partitions.hashCode ^
      partitionLimit.hashCode ^
      useSharpYuv.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is EncodingConfig &&
          runtimeType == other.runtimeType &&
          method == other.method &&
          losless == other.losless &&
          quality == other.quality &&
          targetSize == other.targetSize &&
          targetPsnr == other.targetPsnr &&
          segments == other.segments &&
          noiseShaping == other.noiseShaping &&
          filter == other.filter &&
          alphaCompression == other.alphaCompression &&
          alphaFiltering == other.alphaFiltering &&
          alphaQuality == other.alphaQuality &&
          pass == other.pass &&
          showCompressed == other.showCompressed &&
          preprocessing == other.preprocessing &&
          partitions == other.partitions &&
          partitionLimit == other.partitionLimit &&
          useSharpYuv == other.useSharpYuv;
}

@freezed
sealed class Filter with _$Filter {
  const factory Filter.simple(
    FilterConfig field0,
  ) = Filter_Simple;
  const factory Filter.strong(
    FilterConfig field0,
  ) = Filter_Strong;
}

class FilterConfig {
  final int? strength;
  final int sharpness;

  const FilterConfig({
    this.strength,
    required this.sharpness,
  });

  @override
  int get hashCode => strength.hashCode ^ sharpness.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FilterConfig &&
          runtimeType == other.runtimeType &&
          strength == other.strength &&
          sharpness == other.sharpness;
}

enum Preprocessing {
  segmentSmooth,
}
