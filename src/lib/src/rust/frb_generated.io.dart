// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'webp/encode.dart';
import 'webp/shared.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AlphaFilter dco_decode_alpha_filter(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AlphaFilter dco_decode_box_autoadd_alpha_filter(dynamic raw);

  @protected
  EncodingConfig dco_decode_box_autoadd_encoding_config(dynamic raw);

  @protected
  Filter dco_decode_box_autoadd_filter(dynamic raw);

  @protected
  FilterConfig dco_decode_box_autoadd_filter_config(dynamic raw);

  @protected
  Preprocessing dco_decode_box_autoadd_preprocessing(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw);

  @protected
  EncodingConfig dco_decode_encoding_config(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  Filter dco_decode_filter(dynamic raw);

  @protected
  FilterConfig dco_decode_filter_config(dynamic raw);

  @protected
  Frame dco_decode_frame(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<Frame> dco_decode_list_frame(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  AlphaFilter? dco_decode_opt_box_autoadd_alpha_filter(dynamic raw);

  @protected
  Filter? dco_decode_opt_box_autoadd_filter(dynamic raw);

  @protected
  Preprocessing? dco_decode_opt_box_autoadd_preprocessing(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw);

  @protected
  Preprocessing dco_decode_preprocessing(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  AlphaFilter sse_decode_alpha_filter(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AlphaFilter sse_decode_box_autoadd_alpha_filter(SseDeserializer deserializer);

  @protected
  EncodingConfig sse_decode_box_autoadd_encoding_config(
      SseDeserializer deserializer);

  @protected
  Filter sse_decode_box_autoadd_filter(SseDeserializer deserializer);

  @protected
  FilterConfig sse_decode_box_autoadd_filter_config(
      SseDeserializer deserializer);

  @protected
  Preprocessing sse_decode_box_autoadd_preprocessing(
      SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  EncodingConfig sse_decode_encoding_config(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  Filter sse_decode_filter(SseDeserializer deserializer);

  @protected
  FilterConfig sse_decode_filter_config(SseDeserializer deserializer);

  @protected
  Frame sse_decode_frame(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<Frame> sse_decode_list_frame(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  AlphaFilter? sse_decode_opt_box_autoadd_alpha_filter(
      SseDeserializer deserializer);

  @protected
  Filter? sse_decode_opt_box_autoadd_filter(SseDeserializer deserializer);

  @protected
  Preprocessing? sse_decode_opt_box_autoadd_preprocessing(
      SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  Preprocessing sse_decode_preprocessing(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_alpha_filter(AlphaFilter raw) {
    return wire.cst_new_box_autoadd_alpha_filter(cst_encode_alpha_filter(raw));
  }

  @protected
  ffi.Pointer<wire_cst_encoding_config> cst_encode_box_autoadd_encoding_config(
      EncodingConfig raw) {
    final ptr = wire.cst_new_box_autoadd_encoding_config();
    cst_api_fill_to_wire_encoding_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_filter> cst_encode_box_autoadd_filter(Filter raw) {
    final ptr = wire.cst_new_box_autoadd_filter();
    cst_api_fill_to_wire_filter(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_filter_config> cst_encode_box_autoadd_filter_config(
      FilterConfig raw) {
    final ptr = wire.cst_new_box_autoadd_filter_config();
    cst_api_fill_to_wire_filter_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_preprocessing(
      Preprocessing raw) {
    return wire
        .cst_new_box_autoadd_preprocessing(cst_encode_preprocessing(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> cst_encode_box_autoadd_u_8(int raw) {
    return wire.cst_new_box_autoadd_u_8(cst_encode_u_8(raw));
  }

  @protected
  ffi.Pointer<wire_cst_list_frame> cst_encode_list_frame(List<Frame> raw) {
    final ans = wire.cst_new_list_frame(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_frame(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_alpha_filter(
      AlphaFilter? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_alpha_filter(raw);
  }

  @protected
  ffi.Pointer<wire_cst_filter> cst_encode_opt_box_autoadd_filter(Filter? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_filter(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_preprocessing(
      Preprocessing? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_preprocessing(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> cst_encode_opt_box_autoadd_u_8(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_8(raw);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_encoding_config(
      EncodingConfig apiObj, ffi.Pointer<wire_cst_encoding_config> wireObj) {
    cst_api_fill_to_wire_encoding_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_filter(
      Filter apiObj, ffi.Pointer<wire_cst_filter> wireObj) {
    cst_api_fill_to_wire_filter(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_filter_config(
      FilterConfig apiObj, ffi.Pointer<wire_cst_filter_config> wireObj) {
    cst_api_fill_to_wire_filter_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_encoding_config(
      EncodingConfig apiObj, wire_cst_encoding_config wireObj) {
    wireObj.method = cst_encode_u_8(apiObj.method);
    wireObj.losless = cst_encode_bool(apiObj.losless);
    wireObj.quality = cst_encode_f_32(apiObj.quality);
    wireObj.target_size = cst_encode_i_32(apiObj.targetSize);
    wireObj.target_psnr = cst_encode_f_32(apiObj.targetPsnr);
    wireObj.segments = cst_encode_u_8(apiObj.segments);
    wireObj.noise_shaping = cst_encode_u_8(apiObj.noiseShaping);
    wireObj.filter = cst_encode_opt_box_autoadd_filter(apiObj.filter);
    wireObj.alpha_compression = cst_encode_bool(apiObj.alphaCompression);
    wireObj.alpha_filtering =
        cst_encode_opt_box_autoadd_alpha_filter(apiObj.alphaFiltering);
    wireObj.alpha_quality = cst_encode_u_8(apiObj.alphaQuality);
    wireObj.pass = cst_encode_u_8(apiObj.pass);
    wireObj.show_compressed = cst_encode_bool(apiObj.showCompressed);
    wireObj.preprocessing =
        cst_encode_opt_box_autoadd_preprocessing(apiObj.preprocessing);
    wireObj.partitions = cst_encode_u_8(apiObj.partitions);
    wireObj.partition_limit = cst_encode_u_8(apiObj.partitionLimit);
    wireObj.use_sharp_yuv = cst_encode_bool(apiObj.useSharpYuv);
  }

  @protected
  void cst_api_fill_to_wire_filter(Filter apiObj, wire_cst_filter wireObj) {
    if (apiObj is Filter_Simple) {
      var pre_field0 = cst_encode_box_autoadd_filter_config(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Simple.field0 = pre_field0;
      return;
    }
    if (apiObj is Filter_Strong) {
      var pre_field0 = cst_encode_box_autoadd_filter_config(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Strong.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_filter_config(
      FilterConfig apiObj, wire_cst_filter_config wireObj) {
    wireObj.strength = cst_encode_opt_box_autoadd_u_8(apiObj.strength);
    wireObj.sharpness = cst_encode_u_8(apiObj.sharpness);
  }

  @protected
  void cst_api_fill_to_wire_frame(Frame apiObj, wire_cst_frame wireObj) {
    wireObj.data = cst_encode_list_prim_u_8_strict(apiObj.data);
    wireObj.width = cst_encode_u_32(apiObj.width);
    wireObj.height = cst_encode_u_32(apiObj.height);
    wireObj.timestamp = cst_encode_i_32(apiObj.timestamp);
  }

  @protected
  int cst_encode_alpha_filter(AlphaFilter raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_preprocessing(Preprocessing raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_alpha_filter(AlphaFilter self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_alpha_filter(
      AlphaFilter self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_encoding_config(
      EncodingConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_filter(Filter self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_filter_config(
      FilterConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_preprocessing(
      Preprocessing self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_encoding_config(
      EncodingConfig self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_filter(Filter self, SseSerializer serializer);

  @protected
  void sse_encode_filter_config(FilterConfig self, SseSerializer serializer);

  @protected
  void sse_encode_frame(Frame self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_frame(List<Frame> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_alpha_filter(
      AlphaFilter? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_filter(
      Filter? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_preprocessing(
      Preprocessing? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer);

  @protected
  void sse_encode_preprocessing(Preprocessing self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32, ffi.Int32)>>(
      'frbgen_seventv_for_whatsapp_dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void wire_calc_translucency(
    int port_,
    ffi.Pointer<wire_cst_list_frame> frames,
  ) {
    return _wire_calc_translucency(
      port_,
      frames,
    );
  }

  late final _wire_calc_translucencyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_frame>)>>(
      'frbgen_seventv_for_whatsapp_wire_calc_translucency');
  late final _wire_calc_translucency = _wire_calc_translucencyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_frame>)>();

  void wire_encode(
    int port_,
    ffi.Pointer<wire_cst_list_frame> frames,
    ffi.Pointer<wire_cst_encoding_config> config,
  ) {
    return _wire_encode(
      port_,
      frames,
      config,
    );
  }

  late final _wire_encodePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_frame>,
                  ffi.Pointer<wire_cst_encoding_config>)>>(
      'frbgen_seventv_for_whatsapp_wire_encode');
  late final _wire_encode = _wire_encodePtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_frame>,
          ffi.Pointer<wire_cst_encoding_config>)>();

  void wire_into_frames(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> bytes,
  ) {
    return _wire_into_frames(
      port_,
      bytes,
    );
  }

  late final _wire_into_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_seventv_for_whatsapp_wire_into_frames');
  late final _wire_into_frames = _wire_into_framesPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire_upscale_frames_with_padding(
    int port_,
    ffi.Pointer<wire_cst_list_frame> frames,
    int width,
    int height,
  ) {
    return _wire_upscale_frames_with_padding(
      port_,
      frames,
      width,
      height,
    );
  }

  late final _wire_upscale_frames_with_paddingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_frame>,
                  ffi.Uint32, ffi.Uint32)>>(
      'frbgen_seventv_for_whatsapp_wire_upscale_frames_with_padding');
  late final _wire_upscale_frames_with_padding =
      _wire_upscale_frames_with_paddingPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_frame>, int, int)>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_alpha_filter(
    int value,
  ) {
    return _cst_new_box_autoadd_alpha_filter(
      value,
    );
  }

  late final _cst_new_box_autoadd_alpha_filterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'frbgen_seventv_for_whatsapp_cst_new_box_autoadd_alpha_filter');
  late final _cst_new_box_autoadd_alpha_filter =
      _cst_new_box_autoadd_alpha_filterPtr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_cst_encoding_config> cst_new_box_autoadd_encoding_config() {
    return _cst_new_box_autoadd_encoding_config();
  }

  late final _cst_new_box_autoadd_encoding_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_encoding_config> Function()>>(
      'frbgen_seventv_for_whatsapp_cst_new_box_autoadd_encoding_config');
  late final _cst_new_box_autoadd_encoding_config =
      _cst_new_box_autoadd_encoding_configPtr
          .asFunction<ffi.Pointer<wire_cst_encoding_config> Function()>();

  ffi.Pointer<wire_cst_filter> cst_new_box_autoadd_filter() {
    return _cst_new_box_autoadd_filter();
  }

  late final _cst_new_box_autoadd_filterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_filter> Function()>>(
          'frbgen_seventv_for_whatsapp_cst_new_box_autoadd_filter');
  late final _cst_new_box_autoadd_filter = _cst_new_box_autoadd_filterPtr
      .asFunction<ffi.Pointer<wire_cst_filter> Function()>();

  ffi.Pointer<wire_cst_filter_config> cst_new_box_autoadd_filter_config() {
    return _cst_new_box_autoadd_filter_config();
  }

  late final _cst_new_box_autoadd_filter_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_filter_config> Function()>>(
      'frbgen_seventv_for_whatsapp_cst_new_box_autoadd_filter_config');
  late final _cst_new_box_autoadd_filter_config =
      _cst_new_box_autoadd_filter_configPtr
          .asFunction<ffi.Pointer<wire_cst_filter_config> Function()>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_preprocessing(
    int value,
  ) {
    return _cst_new_box_autoadd_preprocessing(
      value,
    );
  }

  late final _cst_new_box_autoadd_preprocessingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'frbgen_seventv_for_whatsapp_cst_new_box_autoadd_preprocessing');
  late final _cst_new_box_autoadd_preprocessing =
      _cst_new_box_autoadd_preprocessingPtr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Uint8> cst_new_box_autoadd_u_8(
    int value,
  ) {
    return _cst_new_box_autoadd_u_8(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'frbgen_seventv_for_whatsapp_cst_new_box_autoadd_u_8');
  late final _cst_new_box_autoadd_u_8 = _cst_new_box_autoadd_u_8Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_cst_list_frame> cst_new_list_frame(
    int len,
  ) {
    return _cst_new_list_frame(
      len,
    );
  }

  late final _cst_new_list_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_frame> Function(
              ffi.Int32)>>('frbgen_seventv_for_whatsapp_cst_new_list_frame');
  late final _cst_new_list_frame = _cst_new_list_framePtr
      .asFunction<ffi.Pointer<wire_cst_list_frame> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(ffi.Int32)>>(
      'frbgen_seventv_for_whatsapp_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose = _cst_new_list_prim_u_8_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(ffi.Int32)>>(
      'frbgen_seventv_for_whatsapp_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_frame extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Int32()
  external int timestamp;
}

final class wire_cst_list_frame extends ffi.Struct {
  external ffi.Pointer<wire_cst_frame> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_filter_config extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> strength;

  @ffi.Uint8()
  external int sharpness;
}

final class wire_cst_Filter_Simple extends ffi.Struct {
  external ffi.Pointer<wire_cst_filter_config> field0;
}

final class wire_cst_Filter_Strong extends ffi.Struct {
  external ffi.Pointer<wire_cst_filter_config> field0;
}

final class FilterKind extends ffi.Union {
  external wire_cst_Filter_Simple Simple;

  external wire_cst_Filter_Strong Strong;
}

final class wire_cst_filter extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external FilterKind kind;
}

final class wire_cst_encoding_config extends ffi.Struct {
  @ffi.Uint8()
  external int method;

  @ffi.Bool()
  external bool losless;

  @ffi.Float()
  external double quality;

  @ffi.Int32()
  external int target_size;

  @ffi.Float()
  external double target_psnr;

  @ffi.Uint8()
  external int segments;

  @ffi.Uint8()
  external int noise_shaping;

  external ffi.Pointer<wire_cst_filter> filter;

  @ffi.Bool()
  external bool alpha_compression;

  external ffi.Pointer<ffi.Int32> alpha_filtering;

  @ffi.Uint8()
  external int alpha_quality;

  @ffi.Uint8()
  external int pass;

  @ffi.Bool()
  external bool show_compressed;

  external ffi.Pointer<ffi.Int32> preprocessing;

  @ffi.Uint8()
  external int partitions;

  @ffi.Uint8()
  external int partition_limit;

  @ffi.Bool()
  external bool use_sharp_yuv;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}
