#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.68.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::webp::encode::AlphaFilter;
use crate::webp::encode::EncodingConfig;
use crate::webp::encode::Filter;
use crate::webp::encode::FilterConfig;
use crate::webp::encode::Preprocessing;
use crate::webp::shared::Frame;

// Section: wire functions

fn wire_into_frames_impl(port_: MessagePort, bytes: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "into_frames",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bytes = bytes.wire2api();
            move |task_callback| Ok(into_frames(api_bytes))
        },
    )
}
fn wire_upscale_frames_with_padding_impl(
    port_: MessagePort,
    frames: impl Wire2Api<Vec<Frame>> + UnwindSafe,
    width: impl Wire2Api<u32> + UnwindSafe,
    height: impl Wire2Api<u32> + UnwindSafe,
    config: impl Wire2Api<EncodingConfig> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "upscale_frames_with_padding",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_frames = frames.wire2api();
            let api_width = width.wire2api();
            let api_height = height.wire2api();
            let api_config = config.wire2api();
            move |task_callback| {
                Ok(upscale_frames_with_padding(
                    api_frames, api_width, api_height, api_config,
                ))
            }
        },
    )
}
fn wire_calc_translucency_impl(port_: MessagePort, frames: impl Wire2Api<Vec<Frame>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "calc_translucency",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_frames = frames.wire2api();
            move |task_callback| Ok(calc_translucency(api_frames))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<AlphaFilter> for i32 {
    fn wire2api(self) -> AlphaFilter {
        match self {
            0 => AlphaFilter::Fast,
            1 => AlphaFilter::Best,
            _ => unreachable!("Invalid variant for AlphaFilter: {}", self),
        }
    }
}
impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<Preprocessing> for i32 {
    fn wire2api(self) -> Preprocessing {
        match self {
            0 => Preprocessing::SegmentSmooth,
            _ => unreachable!("Invalid variant for Preprocessing: {}", self),
        }
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Frame {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.data.into_dart(),
            self.width.into_dart(),
            self.height.into_dart(),
            self.timestamp.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Frame {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
